//1 libraries
pip install pandas -> Work with tabular data
pip install matplotlib seaborn -> For visualization
pip install python-dotenv -> For API credential access
pip install langchain langchain-community langchain-openai chromadb tiktoken -> Working with LLM
pip install transformers -> Work with Open source LLM
pip install gradio -> Framwork to interact with recommender

//2 dataset
https://www.kaggle.com/datasets/dylanjcastillo/7k-books-with-metadata
done exploration through-> data_exploration.py
Findings:
>>All unique isbn (No repeated books)
>>subtitle column has lots of missing observations (4429/6810)
>>Lots of categories (567) with uneven distribution (Majority Fiction) -> Long Tail Problem
>>Some description have very words making them meaningless
Done:
>>deleted missing observations (~300 deleted)
>>Removed books with minimum words in description < 25 (5197 Remains)
>>added taged description field for easy searching
>>Saving-> books_cleaned.scv

*Pearson when dealing with continuous values and spearman when non-continuous
//3 Word embedding on clean dataset
>>Used LangChain for vector search
>>HuggingFace for converting chunks to embedding
>>Chroma database for storing embedding
>>Main recommendation through:
def retrieve_semantic_recommendations(
        query: str,
        top_k: int = 10,
) -> pd.DataFrame:
    recs = db_books.similarity_search(query, k = 50)
    books_list = []
    for i in range(0, len(recs)):
        books_list += [int(recs[i].page_content.strip('"').split()[0])]
    return books[books["isbn13"].isin(books_list)]
retrieve_semantic_recommendations("A book to teach children about nature")
>>Saving in tagged_description.txt

//4 Text classification
>>Filtering popular categories (Entries > 50)
>>Simplifying complex categories into fiction, non-fiction and children category
>>Used Zero-Shot classification by bart ( a machine learning technique where a model can classify data into 
categories it has never explicitly been trained on. It leverage pre-existing knowledge to make 
predictions without fine-tuning.)
>>Model validation -> 78% accuracy
>>Updating categories with model predictions where missing
>>Saving file-> books_with_categories.csv

//5 